# [ratos_homing]
# axes: xyz
# z_hop: 15
# z_hop_speed: 15
# gcode:
# 	{% set x_homed = 'x' in printer.toolhead.homed_axes %}
# 	{% set y_homed = 'y' in printer.toolhead.homed_axes %}
# 	{% set safe_home_x = printer["gcode_macro RatOS"].safe_home_x %}
# 	{% set safe_home_y = printer["gcode_macro RatOS"].safe_home_y %}
# 	{% if safe_home_x is not defined or safe_home_x|lower == 'middle' %}
# 		{% set safe_home_x = printer.toolhead.axis_maximum.x / 2 %}
# 	{% endif %}
# 	{% if safe_home_y is not defined or safe_home_y|lower == 'middle' %}
# 		{% set safe_home_y = printer.toolhead.axis_maximum.y / 2 %}
# 	{% endif %}
# 	{% set z_probe = printer["gcode_macro RatOS"].z_probe|lower %}
# 	{% set speed = printer["gcode_macro RatOS"].macro_travel_speed|float * 60 %}
# 	{% set z_speed = printer["gcode_macro RatOS"].macro_z_speed|float * 60 %}
# 	{% set z_hop = printer.configfile.config.ratos_homing.z_hop|float %}
# 	{% set z_hop_speed = printer.configfile.config.ratos_homing.z_hop_speed|float * 60 %}
# 	{% set homing_x = printer["gcode_macro RatOS"].homing_x|lower %}
# 	{% set homing_y = printer["gcode_macro RatOS"].homing_y|lower %}
# 	{% set homing = printer["gcode_macro RatOS"].homing|lower %}
# 	{% set prev_stop_on_error = printer["gcode_macro RatOS"].stowable_probe_stop_on_error %}

# 	# Make stowable probe assertion failures cause an emergency stop
# 	SET_GCODE_VARIABLE MACRO=RatOS VARIABLE=stowable_probe_stop_on_error VALUE=True

# 	M400                        # Wait for moves to finish
# 	G90                         # Absolute positioning

# 	{% if params.X is defined or params.Y is not defined and params.Z is not defined %}
# 		RESPOND MSG="Homing X"
# 		{% if homing_x == 'endstop' or homing == 'endstops' %}
# 			G28 X
# 		{% elif homing_x == 'sensorless' or homing == 'sensorless' %}
# 			HOME_X_SENSORLESS
# 		{% else %}
# 			{ action_emergency_stop("expected RatOS variable_homing_x to be 'sensorless' 'endstop' or variable_homing to be 'sensorless' or 'endstops' but found {} and {}".format(homing_x, homing)) }
# 		{% endif %}
# 		{% set x_homed = True %}
# 		G0 X{safe_home_x} F{speed}
# 		M400 # Wait for moves to finish
# 	{% endif %}

# 	{% if params.Y is defined or params.X is not defined and params.Z is not defined %}
# 		RESPOND MSG="Homing Y"
# 		{% if homing_y == 'endstop' or homing == 'endstops' %}
# 			G28 Y
# 		{% elif homing_y == 'sensorless' or homing == 'sensorless' %}
# 			HOME_Y_SENSORLESS
# 		{% else %}
# 			{ action_emergency_stop("expected RatOS variable_homing_y to be 'sensorless' 'endstop' or variable_homing to be 'sensorless' or 'endstops' but found {} and {}".format(homing_y, homing)) }
# 		{% endif %}
# 		{% set y_homed = True %}
# 		G0 Y{safe_home_y} F{speed}
# 		M400 # Wait for moves to finish
# 	{% endif %}

# 	{% if params.Z is defined or params.Y is not defined and params.X is not defined %}
# 		RESPOND MSG="Homing Z"
# 		{% if x_homed == False or y_homed == False %}
# 			M118 X and Y must be homed before homing Z
# 			{ action_emergency_stop("X and Y must be homed before homing Z") }
# 		{% else %}
# 			{% if z_probe == "stowable" %}
# 				DEPLOY_PROBE
# 				G0 X{safe_home_x} Y{safe_home_y} F{speed}
# 				G28 Z
# 				G0 Z{z_hop} F{z_hop_speed}
# 				STOW_PROBE
# 			{% else %}
# 				G0 X{safe_home_x} Y{safe_home_y} F{speed}
# 				G28 Z
# 				G0 Z{z_hop} F{z_hop_speed}
# 			{% endif %}
# 		{% endif %}
# 	{% endif %}

# 	# Reset stowable probe stop on error state
# 	SET_GCODE_VARIABLE MACRO=RatOS VARIABLE=stowable_probe_stop_on_error VALUE={prev_stop_on_error}

#####
# CONFIGURATION VARIABLES
#####

[gcode_macro RatOS]
description: RatOS variable storage macro, will echo variables to the console when run.
# Configuration Defaults
# This is only here to make the config backwards compatible.
# Configuration should exclusively happen in printer.cfg.
variable_relative_extrusion: False
variable_force_absolute_position: False
variable_preheat_extruder: True
variable_preheat_extruder_temp: 150
variable_calibrate_bed_mesh: True
variable_nozzle_priming: "primeblob"
variable_nozzle_prime_start_x: "max" # min, max or number
variable_nozzle_prime_start_y: "min" # min, max or number
variable_nozzle_prime_direction: "auto" # auto, forwards, backwards
variable_nozzle_prime_bridge_fan: 102
variable_filament_unload_length: 130
variable_filament_unload_speed: 5
variable_filament_load_length: 100
variable_filament_load_speed: 10
variable_start_print_park_in: "back"
variable_start_print_park_z_height: 50
variable_start_print_heat_chamber_bed_temp: 115
variable_end_print_park_in: "back"
variable_pause_print_park_in: "back"
variable_macro_travel_speed: 150
variable_macro_z_speed: 15
variable_end_print_park_z_hop: 20
# Possible values: 'sensorless' or 'endstops'.
variable_homing: "endstops"
variable_sensorless_x_current: 0.6
variable_sensorless_y_current: 0.9
# Possible values: 'static' or 'stowable'
variable_z_probe: "static"
# Possible Values: 'middle' or an absolute x coordinate
variable_safe_home_x: "middle"
# Possible Values: 'middle' or an absolute y coordinate
variable_safe_home_y: "middle"
variable_stowable_probe_stop_on_error: False
variable_driver_type_x: "tmc2209"
variable_driver_type_y: "tmc2209"
variable_adaptive_mesh: False
variable_probe_for_priming_result: None
variable_adaptive_prime_offset_threshold: -1.0
gcode:
	ECHO_RATOS_VARS

#####
# GENERAL MACROS
#####

[gcode_macro RESUME]
description: Resumes the print if the printer is paused.
rename_existing: RESUME_BASE
gcode:
	{% set E = printer["gcode_macro PAUSE"].extrude|float %}
	# Prime
	{% if printer.extruder.can_extrude|lower == 'true' %}
		G91
		G1 E{E} F2100
		G90
	{% else %}
		{action_respond_info("Extruder not hot enough")}
	{% endif %}
	RESTORE_GCODE_STATE NAME=PAUSE_state MOVE=1 MOVE_SPEED={printer["gcode_macro RatOS"].macro_travel_speed|float}
	RESUME_BASE

[gcode_macro CANCEL_PRINT]
description: Cancels the printer
rename_existing: CANCEL_PRINT_BASE
gcode:
	END_PRINT
	TURN_OFF_HEATERS
	CLEAR_PAUSE
	#SDCARD_RESET_FILE
	CANCEL_PRINT_BASE


# #####
# # COLOR CHANGE
# #####
# [gcode_macro M600]
# description: Executes a color change by pausing the printer an unloading the filament.
# gcode:
# 	PAUSE
# 	UNLOAD_FILAMENT
# 	M117 Please load new filament and resume
# 	RESPOND MSG="Please load new filament and resume"

#####
# FILAMENT MANAGEMENT
#####

[gcode_macro UNLOAD_FILAMENT]
description: Unloads the filament. Note: be careful with PETG, make sure you inspect the tip of your filament before reloading to avoid jams.
gcode:
	SAVE_GCODE_STATE NAME=unload_state
	G91
	{% if params.TEMP is defined or printer.extruder.can_extrude|lower == 'false' %}
		M117 Heating...
		# Heat up hotend to provided temp or 220 as default as that should work OK with most filaments.
		M104 S{params.TEMP|default(220, true)}
		TEMPERATURE_WAIT SENSOR=extruder MINIMUM={params.TEMP|default(220, true)}
	{% endif %}
	{% set unload_speed = printer["gcode_macro RatOS"].filament_unload_speed|float * 60 %}
	{% set unload_length = printer["gcode_macro RatOS"].filament_unload_length|float %}
	M117 Unloading filament...
	# Extrude a bit
	G0 E10 F300
	# Extract filament to cold end area
	G0 E-5 F3600
	# Wait for three seconds
	G4 P3000
	# Push back the filament to smash any stringing
	G0 E5 F3600
	# Extract back fast in to the cold zone
	G0 E-15 F3600
	# Continue extraction slowly, allow the filament time to cool solid before it reaches the gears
	G0 E-{unload_length} F{unload_speed}
	M117 Filament unloaded!
	RESPOND MSG="Filament unloaded! Please inspect the tip of the filament before reloading."
	RESTORE_GCODE_STATE NAME=unload_state

[gcode_macro LOAD_FILAMENT]
description: Loads new filament. Note: be careful with PETG, make sure you inspect the tip of your filament before loading to avoid jams.
gcode:
	SAVE_GCODE_STATE NAME=load_state
	G91
	# Heat up hotend to provided temp or 220 as default as that should work OK with most filaments.
	{% if params.TEMP is defined or printer.extruder.can_extrude|lower == 'false' %}
		M117 Heating...
		M104 S{params.TEMP|default(220, true)}
		TEMPERATURE_WAIT SENSOR=extruder MINIMUM={params.TEMP|default(220, true)}
	{% endif %}
	{% set load_speed = printer["gcode_macro RatOS"].filament_load_speed|float * 60 %}
	{% set load_length = printer["gcode_macro RatOS"].filament_load_length|float %}
	M117 Loading filament...
	# Load the filament into the hotend area.
	G0 E{load_length} F{load_speed}
	# Wait a secod
	G4 P1000
	# Purge
	G0 E40 F100
	# Wait for purge to complete
	M400
	M117 Filament loaded!
	RESPOND MSG="Filament loaded!"
	RESTORE_GCODE_STATE NAME=load_state



#####
# MESH MACROS
####

[gcode_macro SAVE_PROBE_RESULT]
gcode:
	{% set last_z = printer.probe.last_z_result %}
	SET_GCODE_VARIABLE MACRO=RatOS VARIABLE={params.VARIABLE|default('last_z')} VALUE={last_z}

[gcode_macro PROBE_FOR_PRIMING]
gcode:
	{% if printer["gcode_macro RatOS"].nozzle_priming|lower != 'false' %}
		SAVE_GCODE_STATE NAME=probe_for_priming_state
		RESPOND MSG="Probing the prime location.."
		{% set speed = printer["gcode_macro RatOS"].macro_travel_speed|float * 60 %}
		{% set z_speed = printer["gcode_macro RatOS"].macro_z_speed|float * 60 %}
		{% if printer["gcode_macro RatOS"].nozzle_prime_start_x|lower == 'min' %}
			{% set x_start = 5 %}
		{% elif printer["gcode_macro RatOS"].nozzle_prime_start_x|lower == 'max' %}
			{% set x_start = printer.toolhead.axis_maximum.x - 5 %}
		{% else %}
			{% set x_start = printer["gcode_macro RatOS"].nozzle_prime_start_x|float %}
		{% endif %}
		{% if printer["gcode_macro RatOS"].nozzle_prime_start_y|lower == 'min' %}
			{% set y_start = 5 %}
		{% elif printer["gcode_macro RatOS"].nozzle_prime_start_y|lower == 'max' %}
			{% set y_start = printer.toolhead.axis_maximum.y - 5 %}
		{% else %}
			{% set y_start = printer["gcode_macro RatOS"].nozzle_prime_start_y|float %}
		{% endif %}
		{% set z = printer.configfile.settings.bed_mesh.horizontal_move_z|float %}
		# get bed mesh config object
		{% set mesh_config = printer.configfile.config.bed_mesh %}

		# Get probe offsets
		{% if printer.configfile.settings.bltouch is defined %}
			{% set x_offset = printer.configfile.settings.bltouch.x_offset|float %}
			{% set y_offset = printer.configfile.settings.bltouch.y_offset|float %}
		{% elif printer.configfile.settings.probe is defined %}
			{% set x_offset = printer.configfile.settings.probe.x_offset|float %}
			{% set y_offset = printer.configfile.settings.probe.y_offset|float %}
		{% elif printer.configfile.settings.beacon is defined %}
			{% set x_offset = printer.configfile.settings.beacon.x_offset|float %}
			{% set y_offset = printer.configfile.settings.beacon.y_offset|float %}
		{% else %}
			{ action_raise_error("No probe or bltouch section found. Adaptive priming only works with [probe] or [bltouch].") }
		{% endif %}

		# get configured bed mesh area
		{% set min_x = mesh_config.mesh_min.split(",")[0]|float - x_offset %}
		{% set min_y = mesh_config.mesh_min.split(",")[1]|float - y_offset %}
		{% set max_x = mesh_config.mesh_max.split(",")[0]|float - x_offset %}
		{% set max_y = mesh_config.mesh_max.split(",")[1]|float - y_offset %}

		# make sure probe coordinates lie within the configured mesh area
		{% set x_start = [[x_start, max_x]|min, min_x]|max %}
		{% set y_start = [[y_start, max_y]|min, min_y]|max %}

		RESPOND MSG="PROBE_FOR_PRIMING: Probing the prime location at X: {x_start} Y: {y_start}"

		# Absolute positioning
		G90
		# Relative extrusion
		M83
		# Lift to horizontal_move_z
		G0 Z{z} F{z_speed}
		# move close to blob position
		G1 X{x_start} Y{y_start} F{speed}
		PROBE_CURRENT_POSITION
		SAVE_PROBE_RESULT VARIABLE=probe_for_priming_result

		RESTORE_GCODE_STATE NAME=probe_for_priming_state
	{% endif %}

[gcode_macro RESET_PRIME_PROBE_STATE]
gcode:
	SET_GCODE_VARIABLE MACRO=RatOS VARIABLE=probe_for_priming_result VALUE=None

[gcode_macro PROBE_CURRENT_POSITION]
gcode:
	SAVE_GCODE_STATE NAME=probe_current_position_state
	{% if printer["gcode_macro RatOS"].z_probe|lower == 'stowable' %}
		ASSERT_PROBE_DEPLOYED
	{% endif %}
	PROBE
	RESTORE_GCODE_STATE NAME=probe_current_position_state MOVE=1 MOVE_SPEED={printer["gcode_macro RatOS"].macro_z_speed|float}

[gcode_macro ADD_PRIME_PROBE_TO_OFFSET]
gcode:
	{% set last_z = printer["gcode_macro RatOS"].probe_for_priming_result|float(9999.9) %}
	{% if printer.configfile.settings.bltouch is defined %}
		{% set z_offset = printer.configfile.settings.bltouch.z_offset|float %}
	{% elif printer.configfile.settings.probe is defined %}
		{% set z_offset = printer.configfile.settings.probe.z_offset|float %}
	{% else %}
		{ action_raise_error("No probe or bltouch section found. Adaptive priming only works with [probe] or [bltouch].") }
	{% endif %}
	{% if last_z == 9999.9 %}
		{ action_raise_error("No probe result found for prime area. This is likely a bug.") }
	{% endif %}
	{% set adjustment = last_z - z_offset %}
	{% set adjustment_threshold = printer["gcode_macro RatOS"].adaptive_prime_offset_threshold|float %}
	{% if adjustment < adjustment_threshold %}
		{ action_raise_error("Abnormal probe offset detected. Needed offset of {adjustment} is below the offset threshold of -1mm. Please verify the probe is over the bed when probing for priming. If it isn't, you should adjust you min/max bed_mesh settings so the probe is always over the print area.") }
	{% endif %}
	RESPOND MSG="ADD_PRIME_PROBE_TO_OFFSET: adjusting z offset by {adjustment}"
	SET_GCODE_OFFSET Z_ADJUST={adjustment} MOVE=1

[gcode_macro SUBTRACT_PRIME_PROBE_FROM_OFFSET]
gcode:
	{% set last_z = printer["gcode_macro RatOS"].probe_for_priming_result|float(9999.9) %}
	{% if printer.configfile.settings.bltouch is defined %}
		{% set z_offset = printer.configfile.settings.bltouch.z_offset|float %}
	{% elif printer.configfile.settings.probe is defined %}
		{% set z_offset = printer.configfile.settings.probe.z_offset|float %}
	{% else %}
		{ action_raise_error("No probe or bltouch section found. Adaptive priming only works with [probe] or [bltouch].") }
	{% endif %}
	{% if last_z == 9999.9 %}
		{ action_raise_error("No probe result found for prime area. This is likely a bug.") }
	{% endif %}
	RESPOND MSG="SUBTRACT_PRIME_PROBE_FROM_OFFSET: adjusting z offset by {z_offset - last_z}"
	SET_GCODE_OFFSET Z_ADJUST={z_offset - last_z} MOVE=1

[gcode_macro CALIBRATE_ADAPTIVE_MESH]
gcode:
	# get default mesh profile
	{% set default_profile = params.PROFILE %}

	# coordinates from the slicer start gcode
	{% set x0 = params.X0|default(-1)|float %}
	{% set y0 = params.Y0|default(-1)|float %}
	{% set x1 = params.X1|default(-1)|float %}
	{% set y1 = params.Y1|default(-1)|float %}
	RESPOND MSG="CALIBRATE_ADAPTIVE_MESH: Recieved coordinates X0={x0} Y0={y0} X1={x1} Y1={y1}"

	{% if x0 >= x1 or y0 >= y1 %}
		# coordinates are invalid, fall back to full bed mesh
		RESPOND MSG="CALIBRATE_ADAPTIVE_MESH: Invalid coordinates received. Please check your slicer settings. Falling back to full bed mesh."
		BED_MESH_CALIBRATE PROFILE={default_profile}
	{% else %}
		# get bed mesh config object
		{% set mesh_config = printer.configfile.config.bed_mesh %}

		# get configured bed mesh area
		{% set min_x = mesh_config.mesh_min.split(",")[0]|float %}
		{% set min_y = mesh_config.mesh_min.split(",")[1]|float %}
		{% set max_x = mesh_config.mesh_max.split(",")[0]|float %}
		{% set max_y = mesh_config.mesh_max.split(",")[1]|float %}

		# make sure mesh coordinates lie within the configured mesh area
		{% set mesh_x0 = [[x0, max_x]|min, min_x]|max %}
		{% set mesh_y0 = [[y0, max_y]|min, min_y]|max %}
		{% set mesh_x1 = [[x1, max_x]|min, min_x]|max %}
		{% set mesh_y1 = [[y1, max_y]|min, min_y]|max %}

		{% if mesh_x0 == min_x and mesh_y0 == min_y and mesh_x1 == max_x and mesh_y1 == max_y %}
			# coordinates are invalid, fall back to full bed mesh
			RESPOND MSG="CALIBRATE_ADAPTIVE_MESH: Print is using the full bed, falling back to full bed mesh."
			BED_MESH_CALIBRATE PROFILE={default_profile}
		{% else %}
			{% if printer["gcode_macro RatOS"].z_probe|lower == 'stowable' %}
				DEPLOY_PROBE
			{% endif %}
			# get configured probe count
			{% set probe_count_x = mesh_config.probe_count.split(",")[0]|int %}
			{% if mesh_config.probe_count.split(",")|length == 2 %}
					{% set probe_count_y = mesh_config.probe_count.split(",")[1]|int %}
			{% else %}
					{% set probe_count_y = mesh_config.probe_count.split(",")[0]|int %}
			{% endif %}

			# calculate mesh point resolution
			{% set probe_x_step = (max_x - min_x) / probe_count_x %}
			{% set probe_y_step = (max_y - min_y) / probe_count_y %}

			# calculate xy probe count
			{% set mesh_count_x = ([(mesh_x1 - mesh_x0) / probe_x_step, 3]|max)|int %}
			{% set mesh_count_y = ([(mesh_y1 - mesh_y0) / probe_y_step, 3]|max)|int %}
			{% set min_mesh_count = [mesh_count_x, mesh_count_y]|min %}
			{% set max_mesh_count = [mesh_count_x, mesh_count_y]|max %}

			# check algorithms
			{% set algorithm = mesh_config.algorithm %}
			{% if algorithm|lower == 'lagrange' and max_mesh_count > 6 %}
				RESPOND MSG="CALIBRATE_ADAPTIVE_MESH: cannot exceed a probe_count of 6 when using lagrange interpolation. Falling back to bicubic interpolation."
				{% set algorithm = 'bicubic' %}
			{% endif %}
			{% if algorithm|lower == 'bicubic' and min_mesh_count < 4 %}
				{% if max_mesh_count > 6 %}
					RESPOND MSG="CALIBRATE_ADAPTIVE_MESH: invalid probe_count option when using bicubic interpolation. Combination of 3 points on one axis with more than 6 on another is not permitted. Forcing minimum mesh count to be 4."
					{% set min_mesh_count = 4 %}
				{% else %}
					RESPOND MSG="CALIBRATE_ADAPTIVE_MESH: bicubic interpolation with a probe_count of less than 4 points detected. Forcing lagrange interpolation."
					{% set algorithm = 'lagrange' %}
				{% endif %}
			{% endif %}

			{% set mesh_count_x = ([min_mesh_count, mesh_count_x]|max)|int %}
			{% set mesh_count_x = ([max_mesh_count, mesh_count_x]|min)|int %}
			{% set mesh_count_y = ([min_mesh_count, mesh_count_y]|max)|int %}
			{% set mesh_count_y = ([max_mesh_count, mesh_count_y]|min)|int %}

			{% set should_prime = printer["gcode_macro RatOS"].nozzle_priming == 'primeline' or printer["gcode_macro RatOS"].nozzle_priming == 'primeblob' %}
			{% if printer.configfile.settings.beacon is defined %}
				RESPOND MSG="CALIBRATE_ADAPTIVE_MESH: adaptive priming is currently not supported for Beacon. Disabling priming.."
				SET_GCODE_VARIABLE MACRO=RatOS VARIABLE=nozzle_priming VALUE=False
				{% set should_prime = False %}
			{% endif %}

			{% set prime_first = printer["gcode_macro RatOS"].nozzle_prime_start_y|lower == "min" or printer["gcode_macro RatOS"].nozzle_prime_start_y|float(printer.toolhead.axis_maximum.y) < printer.toolhead.axis_maximum.y / 2 %}

			{% if should_prime and prime_first %}
				PROBE_FOR_PRIMING
			{% endif %}
			# mesh
			RESPOND MSG="CALIBRATE_ADAPTIVE_MESH: mesh coordinates X0={mesh_x0} Y0={mesh_y0} X1={mesh_x1} Y1={mesh_y1}"
			BED_MESH_CALIBRATE PROFILE={default_profile} algorithm={algorithm} mesh_min={mesh_x0},{mesh_y0} mesh_max={mesh_x1},{mesh_y1} probe_count={mesh_count_x},{mesh_count_y}

			{% if should_prime and not prime_first %}
				PROBE_FOR_PRIMING
			{% endif %}
			{% if printer["gcode_macro RatOS"].z_probe|lower == 'stowable' %}
				STOW_PROBE
			{% endif %}

		{% endif %}
	{% endif %}

# Print macros. Call these from your slicer (custom g-code).
# You can copy these to printer.cfg and modify them to your liking, or just use them as is.
# Read more here: https://rat-rig.github.io/V-CoreOS/#/slicers
[gcode_macro _START_PRINT_AFTER_HEATING_BED]
gcode:
  {% if printer["gcode_macro RatOS"].preheat_extruder|lower == 'true' %}
    {% set min_temp = printer["gcode_macro RatOS"].preheat_extruder_temp|float %}
    {% set max_temp = printer["gcode_macro RatOS"].preheat_extruder_temp|float + 5 %}
    M117 Pre-heating extruder...
    RESPOND MSG="Pre-heating extruder..."
    # Wait for extruder to reach a predefined preheat temp so an inductive probe (if present) is at a predictable temp.
    # Also allows the bed heat to spread a little, and softens any plastic that might be stuck to the nozzle.
    M104 S{min_temp}
    TEMPERATURE_WAIT SENSOR=extruder MINIMUM={min_temp} MAXIMUM={max_temp}
  {% endif %}
  M117 Adjusting Z tilt...
  RESPOND MSG="Adjusting Z tilt..."
  # Adjust bed tilt
  Z_TILT_ADJUST
  M117 Rehoming Z after Z tilt adjustment...
  RESPOND MSG="Rehoming Z after Z tilt adjustment..."
  # Home again as Z will have changed after tilt adjustment and bed heating.
  G28 Z

[gcode_macro MAYBE_HOME]
description: Only home unhomed axis
variable_is_kinematic_position_overriden: False
gcode:
  {% if printer["gcode_macro MAYBE_HOME"].is_kinematic_position_overriden|lower == 'true' %}
    RESPOND MSG="SET_CENTER_KINEMATIC_POSITION has been abused. Homing all axes. Please refrain from using SET_CENTER_KINEMATIC_POSITION outside of debugging purposes."
    G28
    SET_GCODE_VARIABLE MACRO=MAYBE_HOME VARIABLE=is_kinematic_position_overriden VALUE=False
  {% else %}
    {% set axes = '' %}
    {% set isHomed = true %}
    {% set axesToHome = '' %}
    {% if params.X is defined %}
      {% set axes = axes ~ 'X ' %}
      {% if 'x' not in printer.toolhead.homed_axes %}
        {% set isHomed = false %}
        {% set axesToHome = axesToHome ~ 'X ' %}
      {% endif %}
    {% endif %}
    {% if params.Y is defined %}
      {% set axes = axes ~ 'Y ' %}
      {% if 'y' not in printer.toolhead.homed_axes %}
        {% set isHomed = false %}
        {% set axesToHome = axesToHome ~ 'Y ' %}
      {% endif %}
    {% endif %}
    {% if params.Z is defined %}
      {% set axes = axes ~ 'Z ' %}
      {% if 'z' not in printer.toolhead.homed_axes %}
        {% set isHomed = false %}
        {% set axesToHome = axesToHome ~ 'Z ' %}
      {% endif %}
    {% endif %}
    {% if params.X is not defined and params.Y is not defined and params.Z is not defined %}
      {% set axes = '' %}
      {% if 'x' not in printer.toolhead.homed_axes %}
        {% set isHomed = false %}
        {% set axesToHome = axesToHome ~ 'X ' %}
      {% endif %}
      {% if 'y' not in printer.toolhead.homed_axes %}
        {% set isHomed = false %}
        {% set axesToHome = axesToHome ~ 'Y ' %}
      {% endif %}
      {% if 'z' not in printer.toolhead.homed_axes %}
        {% set isHomed = false %}
        {% set axesToHome = axesToHome ~ 'Z ' %}
      {% endif %}
    {% endif %}
    {% if isHomed is false %}
      M117 Homing {axesToHome}
      RESPOND MSG="Homing {axesToHome}"
      G28 {axesToHome}
    {% else %}
      RESPOND MSG="All requested axes already homed, skipping.."
    {% endif %}
  {% endif %}