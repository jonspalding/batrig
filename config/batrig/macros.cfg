[gcode_macro START_PRINT]
description: Start print
gcode:
  LIGHTS_ON
  #  OrcaSlicer will insert a M141 or M191 before this is called to heat the chamber

  # Figure out which tool is currently loaded
  TOOLCHANGER_RESET

  # Home
  G28

  CLEAR_PAUSE

  SAVE_GCODE_STATE NAME=start_print_state

  G21 # Metric values
  G90 # Absolute positioning
  M82 # Set extruder to absolute mode

  M117 Heating bed...
  RESPOND MSG="Heating bed..."

  {% set bed_temp = params.BED_TEMP|default(printer.heater_bed.target, true)|float %}
  SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={ bed_temp }
  TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={ bed_temp } MAXIMUM={ bed_temp + 10 }
  # M190 S{params.BED_TEMP|default(printer.heater_bed.target, true) } # this waits for temperature to stabilise and can take too long

  # Everything should be warm now
  # Heat the extruder to 150 and wait in order to do do the contact test
  M109 S150
  # Grab the first tool
  T0
  BEACON_AUTO_CALIBRATE

  # Lower the bed to make sure the toolhead is not touching the bed
  G0 Z20 F3600
  # Detach the current tool for the bed mesh
  DETACH_CURRENT_TOOL

  BED_MESH_CLEAR
  BED_MESH_CALIBRATE PROFILE=default
  BED_MESH_PROFILE LOAD=default

  # Start heating extruder
  M104 S{params.EXTRUDER_TEMP|default(printer.extruder.target, true) }

  # Wait for extruder to heat up
  M117 Heating Extruder...
  RESPOND MSG="Heating Extruder..."

  M109 S{params.EXTRUDER_TEMP|default(printer.extruder.target, true) }

  # TODO: enable skew profile
  # SKEW_PROFILE LOAD={printer["gcode_macro RatOS"].skew_profile}

  M117 Printing...
  RESPOND MSG="Printing..."
  RESTORE_GCODE_STATE NAME=start_print_state

  M82 # Set extrusion to absolute
  G92 E0 # Set extruder position to zero

# The end_print macro is also called from CANCEL_PRINT.
[gcode_macro END_PRINT]
description: End print
gcode:
  SAVE_GCODE_STATE NAME=end_print_state

  TURN_OFF_HEATERS

    # Calculate safe Z position
  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  {% set act_z = printer.toolhead.position.z|float %}
  {% set z_hop = 20|float %}
  {% if act_z < (max_z - z_hop) %}
      {% set z_safe = z_hop %}
  {% else %}
      {% set z_safe = max_z - act_z %}
  {% endif %}

  # Relative positioning
  G91
  # Retract the filament a bit before lifting the nozzle.
  G1 E-2 F3600
  # Move to safe Z position
  G0 Z{z_safe} F3600
  # Retract filament even more
  G1 E-2 F3600
  # Back to absolute positioning
  G90

  SET_HEATER_TEMPERATURE HEATER=enclosure_heater TARGET=0
  DETACH_CURRENT_TOOL
  LIGHTS_OFF

  G0 X250 Y470 F3600 # Move the head to the back for easier part removel

  # TODO: enable skew profile
  # SET_SKEW CLEAR=1

  M84 # Steppers off
  M107 # Part cooling fan off
  BED_MESH_CLEAR # Clear bed mesh so that G28 doesn't fail.
  M117 Done :)
  RESPOND MSG="Done :)"
  RESTORE_GCODE_STATE NAME=end_print_state

[gcode_macro PAUSE]
description: Pauses the printer
rename_existing: PAUSE_BASE
variable_extrude: 1.5
gcode:
  SAVE_GCODE_STATE NAME=PAUSE_state
  # Define park positions
  {% set E = printer["gcode_macro PAUSE"].extrude|float %}
  {% set speed = printer["gcode_macro RatOS"].macro_travel_speed|float * 60 %}
  {% set z_speed = printer["gcode_macro RatOS"].macro_z_speed|float * 60 %}
  # Calculate safe Z position
  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  {% set act_z = printer.toolhead.position.z|float %}
  {% if act_z < (max_z - 20.0) %}
      {% set z_safe = 20.0 %}
  {% else %}
      {% set z_safe = max_z - act_z %}
  {% endif %}
  PAUSE_BASE
  G91
  # Retract
  {% if printer.extruder.can_extrude|lower == 'true' %}
    G1 E-{E} F2100
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}


[gcode_macro LIGHTS_ON]
description: Turn the lights on
gcode:
  SET_PIN PIN=lights VALUE=1.00

[gcode_macro LIGHTS_OFF]
description: Turn the lights off
gcode:
  SET_PIN PIN=lights VALUE=0.00

[gcode_macro TEST_TOOLHEAD_DETACH]
description: Test whether the toolhead becomes detached
gcode:
  # Home
  G28
  # Move the bed down
  G0 Z100

  # Move the toolhead back and forth repeatedly
  # to try and detach it
  {% for i in range(10) %}
    G0 X250 Y0 F40000
    G0 X250 Y470 F40000
  {% endfor %}

  # Go to centre
  G0 X250 Y235 F30000

  {% for i in range(20) %}
    G0 X250 Y300 F40000
    G0 X250 Y200 F40000
  {% endfor %}

  {% for i in range(20) %}
    G0 X200 Y235 F40000
    G0 X300 Y235 F40000
  {% endfor %}

  # Zig zag diagonally
  {% for i in range(50) %}
    G0 X260 Y260 F40000
    G0 X240 Y240 F40000
  {% endfor %}

  {% for i in range(50) %}
    G0 X240 Y260 F40000
    G0 X260 Y240 F40000
  {% endfor %}

  {% for i in range(20) %}
    G0 X300 Y300 F40000
    G0 X200 Y200 F40000
  {% endfor %}

  {% for i in range(20) %}
    G0 X200 Y300 F40000
    G0 X300 Y200 F40000
  {% endfor %}

[gcode_macro TEST_TOOLHEAD_DETACH_DIAG]
description: Test whether the toolhead becomes detached
gcode:
  {% for i in range(20) %}
    G0 X200 Y300 F50000
    G0 X300 Y200 F50000
  {% endfor %}



